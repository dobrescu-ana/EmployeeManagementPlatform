<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XControls</name>
    </assembly>
    <members>
        <member name="T:XControls.AutoSelectTextBox.AutoSelectBehavior">
            <summary>
            Enum defining the selection behavior of a control.
            </summary>
        </member>
        <member name="F:XControls.AutoSelectTextBox.AutoSelectBehavior.Never">
            <summary>
            Do not select the text.
            </summary>
        </member>
        <member name="F:XControls.AutoSelectTextBox.AutoSelectBehavior.OnFocus">
            <summary>
            Select all the text on get focus.
            </summary>
        </member>
        <member name="T:XControls.AutoSelectTextBox.AutoSelectTextBox">
            <summary>
            Class defining a text box extending the base text selection behavior.
            </summary>
        </member>
        <member name="F:XControls.AutoSelectTextBox.AutoSelectTextBox.AutoSelectBehaviorProperty">
            <summary>
            Identifies the AutoSelectBehavior property.
            </summary>
        </member>
        <member name="F:XControls.AutoSelectTextBox.AutoSelectTextBox.AutoMoveFocusProperty">
            <summary>
            Identifies the AutoMoveFocus property.
            </summary>
        </member>
        <member name="F:XControls.AutoSelectTextBox.AutoSelectTextBox.QueryMoveFocusEvent">
            <summary>
            Event raised to query if a move focus can be done.
            </summary>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.AutoSelectTextBox.AutoSelectTextBox"/> class.
            </summary>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.AutoSelectTextBox.AutoSelectTextBox"/> class.
            </summary>
        </member>
        <member name="P:XControls.AutoSelectTextBox.AutoSelectTextBox.AutoSelectBehavior">
            <summary>
            Gets or sets the flag indicating when the automatic selection can be done.
            </summary>
        </member>
        <member name="P:XControls.AutoSelectTextBox.AutoSelectTextBox.AutoMoveFocus">
            <summary>
            Gets or sets the flag indicating if the focus can be moved using the arrow keys.
            </summary>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.DisableDragCopy(System.Object,System.Windows.DataObjectCopyingEventArgs)">
            <summary>
            Delegate called to disable the capability of dragging selected text of the text box.
            </summary>
            <param name="pSender">The modified text box.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Delegate called when a key is going to be pressed.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Delegate called when the control is going to have the focus.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Delegate called when the mouse left is going to be pressed.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Delegate called when the text changed.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.CanMoveFocus(System.Windows.Input.FocusNavigationDirection,System.Boolean)">
            <summary>
            Tests if the focus can be given to an other control.
            </summary>
            <param name="pDirection">The focus direction.</param>
            <param name="pReachedMax">Flag to know if the maximum text length has been reached.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.MoveFocusLeft">
            <summary>
            Moves the focus to the left.
            </summary>
            <returns>True if the focus change succeed, false otherwise.</returns>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.MoveFocusRight">
            <summary>
            Moves the focus to the right.
            </summary>
            <returns>True if the focus change succeed, false otherwise.</returns>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.MoveFocusUp">
            <summary>
            Moves the focus up.
            </summary>
            <returns>True if the focus change succeed, false otherwise.</returns>
        </member>
        <member name="M:XControls.AutoSelectTextBox.AutoSelectTextBox.MoveFocusDown">
            <summary>
            Moves the focus down.
            </summary>
            <returns>True if the focus change succeed, false otherwise.</returns>
        </member>
        <member name="T:XControls.AutoSelectTextBox.QueryMoveFocusEventHandler">
            <summary>
            Delegate used to query a move focus.
            </summary>
            <param name="pSender">The source control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs">
            <summary>
            Class defining a query to move the focus.
            </summary>
        </member>
        <member name="M:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs"/> class.
            </summary>
        </member>
        <member name="M:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs.#ctor(System.Windows.Input.FocusNavigationDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs"/> class.
            </summary>
            <param name="pDirection">The focus direction.</param>
            <param name="pReachedMaxLength">Flag indicating if the text maximum length has been reached.</param>
        </member>
        <member name="P:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs.FocusNavigationDirection">
            <summary>
            Gets the focus navigation direction.
            </summary>
        </member>
        <member name="P:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs.ReachedMaxLength">
            <summary>
            Gets the flag indicating if the text maximum length has been reached.
            </summary>
        </member>
        <member name="P:XControls.AutoSelectTextBox.QueryMoveFocusEventArgs.CanMoveFocus">
            <summary>
            Gets or sets the flag indicating if the focus move can be done.
            </summary>
        </member>
        <member name="T:XControls.BusyBar.BusyBar">
            <summary>
            A circular type progress bar, that is similar to popular web based progress bars.
            Adapted from : http://www.codeproject.com/Articles/49455/Better-WPF-Circular-Progress-Bar.aspx?msg=3322272
            </summary>
            <!-- NBY -->
            <summary>
            BusyBar
            </summary>
        </member>
        <member name="F:XControls.BusyBar.BusyBar.mAnimationTimer">
            <summary>
            This field stores the animation timer.
            </summary>
        </member>
        <member name="F:XControls.BusyBar.BusyBar.mColor">
            <summary>
            The busy bar color.
            </summary>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.Start">
            <summary>
            This methods starts the animation.
            </summary>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.Stop">
            <summary>
            This method stops the animation.
            </summary>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.OnTimerTicked(System.Object,System.EventArgs)">
            <summary>
            This methods updates the animation.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.OnControlLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This methods updates the different circles when the control is loaded.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.OnControlUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method stops the animation when the control is unloaded.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.OnVisibilityChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the visibility is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="P:XControls.BusyBar.BusyBar.Color">
            <summary>
            Gets or sets the color of the busy bar.
            </summary>
        </member>
        <member name="E:XControls.BusyBar.BusyBar.PropertyChanged">
            <summary>
            Raised when a property is modifyed.
            </summary>
        </member>
        <member name="M:XControls.BusyBar.BusyBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XControls.ButtonSpinner.Location">
            <summary>
            Enum describing the spinner position.
            </summary>
        </member>
        <member name="T:XControls.ButtonSpinner.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.AllowSpinProperty">
            <summary>
            Identifies the AllowSpin property.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.ButtonSpinnerLocationProperty">
            <summary>
            Identifies the ButtonSpinnerLocation property.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.ShowInfiniteButtonProperty">
            <summary>
            Identifies the ShowInfiniteButton property.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.ShowButtonSpinnerProperty">
            <summary>
            Identifies the ShowButtonSpinner property.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.PART_INCREASE_BUTTON">
            <summary>
            Stores the names of the control template parts.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.mDecreaseButton">
            <summary>
            Stores the decrease button.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.mIncreaseButton">
            <summary>
            Stores the increase button.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ButtonSpinner.mInfiniteButton">
            <summary>
            Stores the infinite button.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.AllowSpin">
            <summary>
            Gets or sets the flag allowing or not to spin.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.ButtonSpinnerLocation">
            <summary>
            Gets or sets the property defining the position of the spin buttons.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.ShowInfiniteButton">
            <summary>
            Gets or sets the flag defining if the infinite button can be displayed.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.ShowButtonSpinner">
            <summary>
            Gets or sets the flag defining if all the buttons can be displayed.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.Content">
            <summary>
            Gets or sets the control content.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ButtonSpinner.InfiniteButton">
            <summary>
            Gets or sets the InfiniteButton template part.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.ButtonSpinner.ButtonSpinner"/> class.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnAllowSpinPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the AllowSpin property changed.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="pObject">ButtonSpinner that changed its Content.</param>
            <param name="pEventArgs">Event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnApplyTemplate">
            <summary>
            Method called when the template is applied.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Delegate called when the mouse left button is up.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Deleaget called when a key is going ot be down.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Delegate called when the mouse wheel is used.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnValidSpinDirectionChanged(XControls.ButtonSpinner.ValidSpinDirections,XControls.ButtonSpinner.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="pOldValue">The old value.</param>
            <param name="pNewValue">The new value.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of buttons template parts, translating Click to appropriate Spin event.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Delegate called when the Content property value changed.
            </summary>
            <param name="pOldValue">The old value of the Content property.</param>
            <param name="pNewValue">The new value of the Content property.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ButtonSpinner.OnAllowSpinChanged(System.Boolean,System.Boolean)">
            <summary>
            Delegate called when the AllowSpin property value changed.
            </summary>
            <param name="pOldValue">The old value.</param>
            <param name="pNewValue">The new value.</param>
        </member>
        <member name="T:XControls.ButtonSpinner.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:XControls.ButtonSpinner.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the end-user.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.SpinEventArgs.UsingMouseWheel">
            <summary>
            Gets wheter the spin event originated from a mouse wheel event.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.SpinEventArgs.GoToInfinite">
            <summary>
            Gets the flag indicating if the value must be set to the infinite.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.SpinEventArgs.#ctor(XControls.ButtonSpinner.SpinDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> class.
            </summary>
            <param name="pDirection">The spin direction.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.SpinEventArgs.#ctor(XControls.ButtonSpinner.SpinDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> class.
            </summary>
            <param name="pDirection">The spin direction.</param>
            <param name="pUsingMouseWheel">Flag to know if the mouse wheel is used.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.SpinEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> class.
            </summary>
            <param name="pGoToInfinite">Flag to know if a "go to the infinite" is requested.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.SpinEventArgs.#ctor(XControls.ButtonSpinner.SpinDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> class.
            </summary>
            <param name="pDirection">The spin direction.</param>
            <param name="pUsingMouseWheel">Flag to know if the mouse wheel is used.</param>
            <param name="pGoToInfinite">Flag to know if a "go to the infinite" is requested.</param>
        </member>
        <member name="T:XControls.ButtonSpinner.ASpinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ASpinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="E:XControls.ButtonSpinner.ASpinner.Spin">
            <summary>
            Event raised when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ASpinner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.ButtonSpinner.ASpinner"/> class.
            </summary>
        </member>
        <member name="P:XControls.ButtonSpinner.ASpinner.ValidSpinDirections">
            <summary>
            Gets or sets the flag indicating the valid spin directions.
            </summary>
        </member>
        <member name="M:XControls.ButtonSpinner.ASpinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="pObject">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ASpinner.NotifySpin(XControls.ButtonSpinner.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ButtonSpinner.ASpinner.OnValidSpinDirectionChanged(XControls.ButtonSpinner.ValidSpinDirections,XControls.ButtonSpinner.ValidSpinDirections)">
            <summary>
            Method called when valid spin direction changed.
            </summary>
            <param name="pOldValue">The old value.</param>
            <param name="pNewValue">The new value.</param>
        </member>
        <member name="T:XControls.ButtonSpinner.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:XControls.ButtonSpinner.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:XControls.Core.Converters.BooleanToVisibilityConverter">
            <summary>
                This lConverter allows to convert from Boolean to Visibility type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="P:XControls.Core.Converters.BooleanToVisibilityConverter.InvertVisibility">
            <summary>
                This property is used to invert the visibility with the lConverter.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.BooleanToVisibilityConverter.NotVisibleValue">
            <summary>
                This property is used to set the visibility equals to "False"
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.BooleanToVisibilityConverter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Visibility to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Boolean to Visibility.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.BrushToColorConverter">
            <summary>
                This lConverter allows to convert from Brush to Color type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="M:XControls.Core.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Brush to Color.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Color to Brush.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.ColorToBrushConverter">
            <summary>
                This lConverter allows to convert from Brush to Color type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="F:XControls.Core.Converters.ColorToBrushConverter.mInvertConverter">
            <summary>
                This fiels stores the invert lConverter.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Brush to Color.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Color to Brush.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.DoubleToStringWithCulture">
            <summary>
                This converter is only used to convert a string to double with the current culture.
            </summary>
            <!-- NBY -->
        </member>
        <member name="M:XControls.Core.Converters.DoubleToStringWithCulture.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from B to A.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the converter).</param>
            <param name="pCulture">The culture to use (not used by the converter).</param>
            <returns>he converted value.</returns>
        </member>
        <member name="M:XControls.Core.Converters.DoubleToStringWithCulture.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from A to B.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the converter).</param>
            <param name="pCulture">The culture to use (not used by the converter).</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:XControls.Core.Converters.Int32ToVisibilityConverter">
            <summary>
                This lConverter allows to convert from Boolean to Visibility type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="P:XControls.Core.Converters.Int32ToVisibilityConverter.ZeroValue">
            <summary>
                Gets or sets the visibility equals to 0.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.Int32ToVisibilityConverter.NotZeroValue">
            <summary>
                Gets or sets the visibility not equals to 0.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.Int32ToVisibilityConverter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.Int32ToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Visibility to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.Int32ToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Boolean to Visibility.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.InvertBoolConverter">
            <summary>
                This lConverter allows to invert a boolean value.
            </summary>
            <!-- DPE -->
        </member>
        <member name="M:XControls.Core.Converters.InvertBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Boolean to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.InvertBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Boolean to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.MediaColorToDrawingColorConverter">
            <summary>
                This lConverter allows to convert from Brush to Color type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="F:XControls.Core.Converters.MediaColorToDrawingColorConverter.Instance">
            <summary>
                Used as singleton.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.MediaColorToDrawingColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Brush to Color.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.MediaColorToDrawingColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Color to Brush.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.MultiplicityToBooleanConverter">
            <summary>
                This class converts an integer to boolean. The result is true if an integer is greather than one.
            </summary>
            <!-- NBY -->
        </member>
        <member name="M:XControls.Core.Converters.MultiplicityToBooleanConverter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.MultiplicityToBooleanConverter.IncludeOne">
            <summary>
                Gets or sets the flag to know if the '1' is considered as a multiple.
                The default value is false.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.MultiplicityToBooleanConverter.ZeroBoolValue">
            <summary>
                Gets or sets the boolean value to return if the value is zero (or one if the flag IncludeOne is set to true).
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.MultiplicityToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Int32 to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.MultiplicityToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Boolean to Int32.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.NullableToStringConverter">
            <summary>
                This lConverter allows to convert from nullable object to String type.
            </summary>
            <!-- DPE -->
        </member>
        <member name="M:XControls.Core.Converters.NullableToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from String to Nullable.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.NullableToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Nullable to String.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.NullToVisibilityConverter">
            <summary>
                This lConverter allows to convert from Null to Visibility type.
            </summary>
            <!-- NBY -->
        </member>
        <member name="P:XControls.Core.Converters.NullToVisibilityConverter.NullVisibility">
            <summary>
                Gets or set the visibility corresponding to "null".
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.NullToVisibilityConverter.NotNullVisibility">
            <summary>
                Gets or set the visibility corresponding to not "null".
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.NullToVisibilityConverter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Visibility to Null.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Null to Visibility.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.ObjectToDoubleConverter">
            <summary>
                This lConverter allows to convert from Object to Double.
            </summary>
            <!-- NBY -->
        </member>
        <member name="M:XControls.Core.Converters.ObjectToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Double to Object.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
        </member>
        <member name="M:XControls.Core.Converters.ObjectToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Object to Double.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.ValidationToBrushConverter">
            <summary>
                This class converts two booleans (IsValid and HasBeenEdited) to a color code.
                Green for HasBeenEdited = true and IsValid = true
                Orange for HasBeenEdited = false and IsValid = true
                Red for IsValid = false
            </summary>
            <!-- NBY -->
        </member>
        <member name="M:XControls.Core.Converters.ValidationToBrushConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Int32 to Boolean.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetTypes">The target types.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.ValidationToBrushConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from two Booleans to Color.
            </summary>
            <param name="pValues">The values to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.ValueConverterGroup">
            <summary>
                A value lConverter which contains a list of IValueConverters and invokes their Convert or ConvertBack methods
                in the order that they exist in the list.  The output of one lConverter is piped into the next lConverter
                allowing for modular value mConverters to be chained together.  If the ConvertBack method is invoked, the
                value mConverters are executed in reverse order (highest to lowest index).  Do not leave an element in the
                Converters property collection null, every element must reference a valid IValueConverter instance. If a
                value lConverter's type is not decorated with the ValueConversionAttribute, an InvalidOperationException will be
                thrown when the lConverter is added to the Converters collection.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.ValueConverterGroup.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.ValueConverterGroup.Converters">
            <summary>
                Gets the list of IValueConverters contained in this lConverter.
            </summary>
        </member>
        <member name="F:XControls.Core.Converters.ValueConverterGroup.mConverters">
            <summary>
                This fields stores the lConverter list.
            </summary>
        </member>
        <member name="F:XControls.Core.Converters.ValueConverterGroup.mCachedAttributes">
            <summary>
                This fields stores the attributes.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Source to Destination.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Destination to Source.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.ValueConverterGroup.GetTargetType(System.Int32,System.Type,System.Boolean)">
            <summary>
                Returns the target type for a conversion operation.
            </summary>
            <param name="converterIndex">The index of the current lConverter about to be executed.</param>
            <param name="finalTargetType">The 'targetType' argument passed into the conversion method.</param>
            <param name="convert">Pass true if calling from the Convert method, or false if calling from ConvertBack.</param>
        </member>
        <member name="M:XControls.Core.Converters.ValueConverterGroup.OnConvertersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                This method is called when the collection is changed.
            </summary>
            <param name="pSender"></param>
            <param name="pEventArgs"></param>
        </member>
        <member name="T:XControls.Core.Converters.DebugConverter">
            <summary>
                Class defining a debug converter.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.DebugConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts back.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.InverseBoolConverter">
            <summary>
                Converter inverting a boolean.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.InverseBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.InverseBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Converts back.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Converters.NullToBoolConverter">
            <summary>
                This converter allows to convert from Object nullness to Boolean type.
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.NullToBoolConverter.NullBoolean">
            <summary>
                Gets or set the visibility corresponding to "True".
            </summary>
        </member>
        <member name="P:XControls.Core.Converters.NullToBoolConverter.NotNullBoolean">
            <summary>
                Gets or set the visibility corresponding to "False".
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.NullToBoolConverter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:XControls.Core.Converters.NullToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Visibility to Bool.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="M:XControls.Core.Converters.NullToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert from Bool to Visibility.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pExtraParameter">The extra parameter to use (not used by the lConverter).</param>
            <param name="pCulture">The culture to use (not used by the lConverter).</param>
            <returns>The value converted.</returns>
        </member>
        <member name="T:XControls.Core.Utilities.TreeHelper">
            <summary>
            Class defining a visual tree helper.
            </summary>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.GetParent(System.Windows.DependencyObject)">
            <summary>
            Tries its best to return the specified element's parent. It will 
            try to find, in this order, the VisualParent, LogicalParent, LogicalTemplatedParent.
            It only works for Visual, FrameworkElement or FrameworkContentElement.
            </summary>
            <param name="pElement">The element to which to return the parent. It will only 
            work if element is a Visual, a FrameworkElement or a FrameworkContentElement.</param>
            <remarks>If the logical parent is not found (Parent), we check the TemplatedParent
            (see FrameworkElement.Parent documentation). But, we never actually witnessed
            this situation.</remarks>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.GetParent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Tries its best to return the specified element's parent. It will 
            try to find, in this order, the VisualParent, LogicalParent, LogicalTemplatedParent.
            It only works for Visual, FrameworkElement or FrameworkContentElement.
            </summary>
            <param name="pElement">The element to which to return the parent. It will only work if element is a Visual, a FrameworkElement or a FrameworkContentElement.</param>
            <param name="pRecurseIntoPopup">Flag to know if the research mus be done in popup to.</param>
            <remarks>If the logical parent is not found (Parent), we check the TemplatedParent
            (see FrameworkElement.Parent documentation). But, we never actually witnessed
            this situation.</remarks>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            This will search for a parent of the specified type.
            </summary>
            <typeparam name="T">The type of the element to find</typeparam>
            <param name="pStartingObject">The node where the search begins. This element is not checked.</param>
            <returns>Returns the found element. Null if nothing is found.</returns>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.FindParent``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            This will search for a parent of the specified type.
            </summary>
            <typeparam name="T">The type of the element to find</typeparam>
            <param name="pStartingObject">The node where the search begins.</param>
            <param name="pCheckStartingObject">Should the specified startingObject be checked first.</param>
            <returns>Returns the found element. Null if nothing is found.</returns>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.FindParent``1(System.Windows.DependencyObject,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            This will search for a parent of the specified type.
            </summary>
            <typeparam name="T">The type of the element to find</typeparam>
            <param name="pStartingObject">The node where the search begins.</param>
            <param name="pCheckStartingObject">Should the specified startingObject be checked first.</param>
            <param name="pAdditionalCheck">Provide a callback to check additional properties 
            of the found elements. Can be left Null if no additional criteria are needed.</param>
            <returns>Returns the found element. Null if nothing is found.</returns>
            <example>Button button = TreeHelper.FindParent&lt;Button&gt;( this, foundChild => foundChild.Focusable );</example>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.FindChild``1(System.Windows.DependencyObject)">
            <summary>
            This will search for a child of the specified type. The search is performed 
            hierarchically, breadth first (as opposed to depth first).
            </summary>
            <typeparam name="T">The type of the element to find</typeparam>
            <param name="pParent">The root of the tree to search for. This element itself is not checked.</param>
            <returns>Returns the found element. Null if nothing is found.</returns>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.FindChild``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            This will search for a child of the specified type. The search is performed 
            hierarchically, breadth first (as opposed to depth first).
            </summary>
            <typeparam name="T">The type of the element to find</typeparam>
            <param name="pParent">The root of the tree to search for. This element itself is not checked.</param>
            <param name="pAdditionalCheck">Provide a callback to check additional properties 
            of the found elements. Can be left Null if no additional criteria are needed.</param>
            <returns>Returns the found element. Null if nothing is found.</returns>
            <example>Button button = TreeHelper.FindChild&lt;Button&gt;( this, foundChild => foundChild.Focusable );</example>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true if the specified element is a child of parent somewhere in the visual 
            tree. This method will work for Visual, FrameworkElement and FrameworkContentElement.
            </summary>
            <param name="pElement">The element that is potentially a child of the specified parent.</param>
            <param name="pParent">The element that is potentially a parent of the specified element.</param>
        </member>
        <member name="M:XControls.Core.Utilities.TreeHelper.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns true if the specified element is a child of parent somewhere in the visual 
            tree. This method will work for Visual, FrameworkElement and FrameworkContentElement.
            </summary>
            <param name="pElement">The element that is potentially a child of the specified parent.</param>
            <param name="pParent">The element that is potentially a parent of the specified element.</param>
        </member>
        <member name="T:XControls.Core.Constants">
            <summary>
            Class containing constants fields.
            </summary>
        </member>
        <member name="F:XControls.Core.Constants.InfinitySymbol">
            <summary>
            Constant representing the infinity symbol.
            </summary>
        </member>
        <member name="F:XControls.Core.Constants.ApproximationSymbol">
            <summary>
            Constant representing the approximation symbol.
            </summary>
        </member>
        <member name="F:XControls.Core.Constants.WatermarkWithSymbolStringFormat">
            <summary>
            Stores the watermark string format when the symbol must be displayed as well.
            </summary>
        </member>
        <member name="T:XControls.Core.Input.InputValidationErrorEventHandler">
            <summary>
            Delegate defining an input validation error.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.Core.Input.InputValidationErrorEventArgs">
            <summary>
            Class defining the input validation error event arguments.
            </summary>
        </member>
        <member name="M:XControls.Core.Input.InputValidationErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.Core.Input.InputValidationErrorEventArgs"/> class.
            </summary>
            <param name="pException">The raised exception.</param>
        </member>
        <member name="P:XControls.Core.Input.InputValidationErrorEventArgs.Exception">
            <summary>
            Gets or sets the raised exception.
            </summary>
        </member>
        <member name="P:XControls.Core.Input.InputValidationErrorEventArgs.ThrowException">
            <summary>
            Gets or sets the flag indicating if the exception can be thrown.
            </summary>
        </member>
        <member name="T:XControls.Core.Input.IValidateInput">
            <summary>
            Interface defining an input that can be validating.
            </summary>
        </member>
        <member name="E:XControls.Core.Input.IValidateInput.InputValidationError">
            <summary>
            Event raised when an error occured on validation.
            </summary>
        </member>
        <member name="M:XControls.Core.Input.IValidateInput.CommitInput">
            <summary>
            Commits the modification and validate the input.
            </summary>
            <returns>True if the commit validation succeed, false otherwise.</returns>
        </member>
        <member name="M:XControls.Core.Input.IValidateInput.CancelInput">
            <summary>
            Cancels the modification.
            </summary>
            <returns>True if the cancelation succeed, false otherwise.</returns>
        </member>
        <member name="T:XControls.Core.Markup.InfiniteStringMarkupExtension">
            <summary>
            Class allowing the user to display an infinite symbol into a WPF control.
            </summary>
        </member>
        <member name="M:XControls.Core.Markup.InfiniteStringMarkupExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns the infinite symbol.
            </summary>
            <param name="pServiceProvider">The execution context.</param>
            <returns>The infinite symbol.</returns>
        </member>
        <member name="F:XControls.DropDownButton.DropDownButton.mVisibilityTimer">
            <summary>
            Stores the timer used to auto hide the popup.
            </summary>
        </member>
        <member name="P:XControls.DropDownButton.DropDownButton.DropDownVisibilityDelay">
            <summary>
            Gets or sets the delay in seconds.
            </summary>
        </member>
        <member name="M:XControls.DropDownButton.DropDownButton.CloseDropDown(System.Boolean)">
            <summary>
            Closes the drop down.
            </summary>
        </member>
        <member name="M:XControls.DropDownButton.DropDownButton.RaiseRoutedEvent(System.Windows.RoutedEvent)">
            <summary>
            Raises routed events.
            </summary>
        </member>
        <member name="M:XControls.DropDownButton.DropDownButton.RaiseCommand">
            <summary>
            Raises the command's Execute event.
            </summary>
        </member>
        <member name="M:XControls.DropDownButton.DropDownButton.UnhookCommand(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Unhooks a command from the Command property.
            </summary>
            <param name="oldCommand">The old command.</param>
            <param name="newCommand">The new command.</param>
        </member>
        <member name="M:XControls.DropDownButton.DropDownButton.HookUpCommand(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Hooks up a command to the CanExecuteChnaged event handler.
            </summary>
            <param name="oldCommand">The old command.</param>
            <param name="newCommand">The new command.</param>
        </member>
        <member name="T:XControls.DropDownButton.IUpdateable">
            <summary>
            Class defining a control that has to be updated when the popup is displayed.
            </summary>
        </member>
        <member name="M:XControls.DropDownButton.IUpdateable.Update">
            <summary>
            Update the control.
            </summary>
        </member>
        <member name="T:XControls.NotifierButton.ANotificationViewModel">
            <summary>
            Base class defining a notification view model.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.ANotificationViewModel.mLifeTimer">
            <summary>
            Stores the life timer.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.ANotificationViewModel.mQuickStyle">
            <summary>
            Stores the notification quick style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Type">
            <summary>
            Gets the type of the notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Id">
            <summary>
            Gets the identifier of the notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Index">
            <summary>
            Gets the index of this notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Title">
            <summary>
            Gets or sets the message title.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Message">
            <summary>
            Gets or sets the message to display.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.DefaultAnswer">
            <summary>
            Gets the default answer for this notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.LifeTimeout">
            <summary>
            Gets or sets the life timeout of the notification in seconds.
            Notification will stay alive until user answer if the timeout is 0.0.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.QuickStyle">
            <summary>
            Gets or sets the notification quick style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.ShowOnRaised">
            <summary>
            Gets or sets the boolean indicating if the notification has to be shown when raised.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.ANotificationViewModel.Parent">
            <summary>
            Gets or sets the parent view model.
            </summary>
        </member>
        <member name="E:XControls.NotifierButton.ANotificationViewModel.PropertyChanged">
            <summary>
            Event raised when a property changed.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NotifierButton.ANotificationViewModel"/> class.
            </summary>
            <param name="pType">The notification type.</param>
            <param name="pId">The notification id.</param>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.ToString">
            <summary>
            Convert this object to a string description.
            </summary>
            <returns>The string description.</returns>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.TryToStartTimeout">
            <summary>
            Tries to start the timer to handle time out if the notification timeout is defined.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.TryToStopLifeTimer">
            <summary>
            Tries to stop the life timer if it exists.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.OnLifeTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Delegate called when the timer ellapsed.
            </summary>
            <param name="pSender">The timer sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies a property mofication.
            </summary>
            <param name="pPropertyName">The name of the modified property.</param>
        </member>
        <member name="M:XControls.NotifierButton.ANotificationViewModel.Clean">
            <summary>
            Cleans the view model.
            </summary>
        </member>
        <member name="T:XControls.NotifierButton.Answers">
            <summary>
            Enum defining the notification available answers.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.Answers.Ok">
            <summary>
            Ok answer.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.Answers.Yes">
            <summary>
            Yes answer.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.Answers.No">
            <summary>
            No answer.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.Answers.Cancel">
            <summary>
            Cancel answer.
            </summary>
        </member>
        <member name="T:XControls.NotifierButton.NotificationClosedEventHandler`1">
            <summary>
            Delegate handling the notification closed event.
            </summary>
            <param name="pSource">The event source.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.NotifierButton.InformationViewModel">
            <summary>
            Class defining an information notification view model.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.InformationViewModel.mOkButtonStyle">
            <summary>
            Stores the ok button style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.InformationViewModel.OkButtonContent">
            <summary>
            Gets or sets the ok button content.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.InformationViewModel.OkButtonStyle">
            <summary>
            Gets or sets the ok button specific style.
            If null, the default one is used.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.InformationViewModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NotifierButton.InformationViewModel"/> class.
            </summary>
            <param name="pType">The notification type.</param>
            <param name="pId">The notification id.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotificationClosedEventArgs">
            <summary>
            Class defining the event arguments of the <see cref="T:XControls.NotifierButton.NotificationClosedEventHandler`1"/> delegate.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationClosedEventArgs.NotificationId">
            <summary>
            Gets the identifier of the notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationClosedEventArgs.Answer">
            <summary>
            Gets the notification answer.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationClosedEventArgs.Timeout">
            <summary>
            Gets the flag indicating if the notification has been closed because of a timeout.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationClosedEventArgs.#ctor(System.String,XControls.NotifierButton.Answers,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NotifierButton.NotificationClosedEventArgs"/> class.
            </summary>
            <param name="pNotificationId">The id of the notification.</param>
            <param name="pAnswer">The returned answer.</param>
            <param name="pTimeout">Flag indicating if the notification has been closed because of a timeout.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotificationCountRenderer">
            <summary>
            Class defining the gui part displaying the notification count.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationCountRenderer.NotificationCountProperty">
            <summary>
            Identifies the NotificationCount dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationCountRenderer.BlinkProperty">
            <summary>
            Identifies the Blink dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationCountRenderer.MAX_DISPLAYED_COUNT">
            <summary>
            Stores the max displayed notification count.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationCountRenderer.NotificationCount">
            <summary>
            Gets or sets the notification count.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationCountRenderer.Blink">
            <summary>
            Gets or sets the blink state.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationCountRenderer.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NotifierButton.NotificationCountRenderer"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationCountRenderer.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:XControls.NotifierButton.NotificationCountRenderer"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationCountRenderer.OnDataContextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the data context property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationCountRenderer.OnNotificationCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the notification count property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationCountRenderer.UpdateRendering(System.Int32)">
            <summary>
            Updates the rendering knowing the notification count.
            </summary>
            <param name="pCount">The notification count.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotificationQuickStyle">
            <summary>
            Class defining a quick style for the notification view control.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.YesButtonBackground">
            <summary>
            Gets or sets the background of the yes button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.NoButtonBackground">
            <summary>
            Gets or sets the background of the no button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.CancelButtonBackground">
            <summary>
            Gets or sets the background of the cancel button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.YesButtonForeground">
            <summary>
            Gets or sets the foreground of the yes button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.NoButtonForeground">
            <summary>
            Gets or sets the foreground of the no button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.CancelButtonForeground">
            <summary>
            Gets or sets the foreground of the cancel button.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.OkButtonBackground">
            <summary>
            Gets or sets the ok button background color.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationQuickStyle.OkButtonForeground">
            <summary>
            Gets or sets the ok button foreground color.
            </summary>
        </member>
        <member name="T:XControls.NotifierButton.NotificationScroller">
            <summary>
            Class defining the notification scroller displayed in the popup.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationScroller.MessageViewHeightProperty">
            <summary>
            Identifies the MessageViewHeight dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationScroller.MessageViewWidthProperty">
            <summary>
            Identifies the MessageViewWidth dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationScroller.PART_PREVIOUS_NOTIFICATION_BUTTON">
            <summary>
            Name of the parts that have to be in the control template.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationScroller.mPreviousNotificationButton">
            <summary>
            Stores the button used to go to the previous notification.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationScroller.mNextNotificationButton">
            <summary>
            Stores the button used to go to the next notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationScroller.ViewModel">
            <summary>
            Gets the notifier view model.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationScroller.MessageViewHeight">
            <summary>
            Gets or sets the message view height.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationScroller.MessageViewWidth">
            <summary>
            Gets or sets the message view width.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NotifierButton.NotificationScroller"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:XControls.NotifierButton.NotificationScroller"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.OnDataContextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the data context property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.OnApplyTemplate">
            <summary>
            Method called when the template of the control is applied.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.OnPreviousNotificationButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the previous notification button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationScroller.OnNextNotificationButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the previous notification button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotificationView">
            <summary>
            Class defining a notification view.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.QuickStyleProperty">
            <summary>
            Identifies the QuickStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.YesButtonStyleProperty">
            <summary>
            Identifies the YesButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.NoButtonStyleProperty">
            <summary>
            Identifies the NoButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.CancelButtonStyleProperty">
            <summary>
            Identifies the CancelButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.OkButtonStyleProperty">
            <summary>
            Identifies the NoButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.PART_OK_BUTTON">
            <summary>
            Name of the parts that have to be in the control template.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mOkButton">
            <summary>
            Stores the ok button.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mCancelButton">
            <summary>
            Stores the cancel button.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mYesButton">
            <summary>
            Stores the yes button.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mNoButton">
            <summary>
            Stores the no button.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mCancelButtonFistColumn">
            <summary>
            Stores the first column handling the cancel button display.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mCancelButtonSecondColumn">
            <summary>
            Stores the second column handling the cancel button display.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotificationView.mMessageScrollViewer">
            <summary>
            Stores the scroll viewer handling the message display.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.ViewModel">
            <summary>
            Gets the notification view model.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.QuickStyle">
            <summary>
            Gets or sets the quick style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.YesButtonStyle">
            <summary>
            Gets or sets the yes button style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.NoButtonStyle">
            <summary>
            Gets or sets the no button style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.CancelButtonStyle">
            <summary>
            Gets or sets the cancel button style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotificationView.OkButtonStyle">
            <summary>
            Gets or sets the ok button style.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NotifierButton.NotificationView"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:XControls.NotifierButton.NotificationView"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnDataContextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the data context property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnApplyTemplate">
            <summary>
            Method called when the template of the control is applied.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.UpdateState">
            <summary>
            Updates the graphic state of the control.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnYesButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the yes button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnNoButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the no button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnOkButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the ok button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnCancelButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delegate called when the cancel button is clicked.
            </summary>
            <param name="pSender">The button sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnQuickStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the quick style property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnYesButtonStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the yes button style property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnNoButtonStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the no button style property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnCancelButtonStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the cancel button style property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotificationView.OnOkButtonStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the ok button style property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotifierButton">
            <summary>
            Class defining a notifier button displaying notifications in a popup.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierButton.NotificationCountProperty">
            <summary>
            Identifies the NotificationCount dependency property.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierButton.PART_NOTIFICATION_COUNT_RENDERER">
            <summary>
            Name of the parts that have to be in the control template.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierButton.mNotificationCountRenderer">
            <summary>
            Stores the notification count renderer.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierButton.ViewModel">
            <summary>
            Gets the notifier view model.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierButton.NotificationCount">
            <summary>
            Gets or sets the notification count.
            </summary>
        </member>
        <member name="E:XControls.NotifierButton.NotifierButton.NotificationClosed">
            <summary>
            Event raised when a notification is closed.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NotifierButton.NotifierButton"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:XControls.NotifierButton.NotifierButton"/> class.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.OnApplyTemplate">
            <summary>
            Method called when the template of the control is applied.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.OnNotificationCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the notification count property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.UpdateState(System.Int32,System.Int32)">
            <summary>
            Updates the button state.
            </summary>
            <param name="pOldNotificationCount">The old notification count.</param>
            <param name="pNewNotificationCount">The new notification count.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.OnViewModelNotificationClosed(XControls.NotifierButton.NotifierViewModel,XControls.NotifierButton.NotificationClosedEventArgs)">
            <summary>
            Delegate called when a notification is closed.
            </summary>
            <param name="pSource">The source view model.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierButton.OnIsOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the is open property changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="T:XControls.NotifierButton.NotifierViewModel">
            <summary>
            Class defining a notification view model.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierViewModel.mParentButton">
            <summary>
            Stores the parent button.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierViewModel.mDisplayedNotification">
            <summary>
            Stores the displayed notification.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierViewModel.mNotifToTimerMap">
            <summary>
            Stores the notifications handled by a timer.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierViewModel.mMessageViewHeight">
            <summary>
            Stores the message view height.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.NotifierViewModel.mMessageViewWidth">
            <summary>
            Stores the message view width.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.Notifications">
            <summary>
            Gets or sets the notifications to display.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.DisplayedNotification">
            <summary>
            Gets or sets the displayed notification.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.CanGoNext">
            <summary>
            Gets the flag indicating if the next notification can be displayed.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.CanGoPrevious">
            <summary>
            Gets the flag indicating if the previous notification can be displayed.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.MessageViewHeight">
            <summary>
            Gets or sets the message view height.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.NotifierViewModel.MessageViewWidth">
            <summary>
            Gets or sets the message view width.
            </summary>
        </member>
        <member name="E:XControls.NotifierButton.NotifierViewModel.PropertyChanged">
            <summary>
            Event raised when a property changed.
            </summary>
        </member>
        <member name="E:XControls.NotifierButton.NotifierViewModel.NotificationClosed">
            <summary>
            Event raised when a notification is closed.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.#ctor(XControls.NotifierButton.NotifierButton)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NotifierButton.NotifierViewModel"/> class.
            </summary>
            <param name="pParentControl">The parent control.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.AddNotification(XControls.NotifierButton.ANotificationViewModel)">
            <summary>
            Adds a notification in the list.
            </summary>
            <param name="pNotification">The notification to add.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.CloseNotification(XControls.NotifierButton.ANotificationViewModel,XControls.NotifierButton.Answers,System.Boolean)">
            <summary>
            Closes a notification.
            </summary>
            <param name="pNotification">The notification to close.</param>
            <param name="pAnswer">The notification answer.</param>
            <param name="pTimeout">Flag indicating if the notification has been closed because of a timeout.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.NotifyNotificationClosed(System.String,XControls.NotifierButton.Answers,System.Boolean)">
            <summary>
            Notifies a notification gets closed.
            </summary>
            <param name="pNotificationId">The notification to close.</param>
            <param name="pAnswer">The notification answer.</param>
            <param name="pTimeout">Flag indicating if the notification has been closed because of a timeout.</param>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.DisplayNextNotification">
            <summary>
            Makes the next notification as the displayed one.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.DisplayPreviousNotification">
            <summary>
            Makes the previous notification as the displayed one.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.NotifierViewModel.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies a property mofication.
            </summary>
            <param name="pPropertyName">The name of the modified property.</param>
        </member>
        <member name="T:XControls.NotifierButton.QuestionViewModel">
            <summary>
            Class defining a question notification view model.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.QuestionViewModel.mYesButtonStyle">
            <summary>
            Stores the ok button style.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.QuestionViewModel.mNoButtonStyle">
            <summary>
            Stores the ok button style.
            </summary>
        </member>
        <member name="F:XControls.NotifierButton.QuestionViewModel.mCancelButtonStyle">
            <summary>
            Stores the ok button style.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.CanCancel">
            <summary>
            Gets or sets the flag indicating if the question can be canceled.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.YesButtonContent">
            <summary>
            Gets or sets the yes button content.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.YesButtonStyle">
            <summary>
            Gets or sets the yes button specific style.
            If null, the default one is used.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.NoButtonContent">
            <summary>
            Gets or sets the no button content.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.NoButtonStyle">
            <summary>
            Gets or sets the no button specific style.
            If null, the default one is used.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.CancelButtonContent">
            <summary>
            Gets or sets the cancel button content.
            </summary>
        </member>
        <member name="P:XControls.NotifierButton.QuestionViewModel.CancelButtonStyle">
            <summary>
            Gets or sets the Cancel button specific style.
            If null, the default one is used.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.QuestionViewModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NotifierButton.QuestionViewModel"/> class.
            </summary>
            <param name="pType">The notification type.</param>
            <param name="pId">The notification id.</param>
        </member>
        <member name="T:XControls.NotifierButton.TitleToHeaderConverter">
            <summary>
            Converter used to convert the notification title to the view header.
            </summary>
        </member>
        <member name="M:XControls.NotifierButton.TitleToHeaderConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from the title to the header.
            </summary>
            <param name="pValues">The values to convert.</param>
            <param name="pTargetType">The target type.</param>
            <param name="pParameter">Additional parameters.</param>
            <param name="pCulture">The culture info.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:XControls.NotifierButton.TitleToHeaderConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Does nothing.
            </summary>
            <param name="pValue">The value to convert.</param>
            <param name="pTargetTypes">The target types.</param>
            <param name="pParameter">Additional parameters.</param>
            <param name="pCulture">The culture info.</param>
            <returns>The converted values.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.UInt64UpDown">
            <summary>
            Class defining an UInt32 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt64UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.UInt64UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt64UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.UInt64UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt64UpDown.CustomIncrementValue(System.UInt64,System.UInt64)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.UInt64UpDown.CustomDecrementValue(System.UInt64,System.UInt64)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.UInt32UpDown">
            <summary>
            Class defining an UInt32 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt32UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.UInt32UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt32UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.UInt32UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt32UpDown.CustomIncrementValue(System.UInt32,System.UInt32)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.UInt32UpDown.CustomDecrementValue(System.UInt32,System.UInt32)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.UInt16UpDown">
            <summary>
            Class defining an UInt16 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt16UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.UInt16UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt16UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.UInt16UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.UInt16UpDown.CustomIncrementValue(System.UInt16,System.UInt16)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.UInt16UpDown.CustomDecrementValue(System.UInt16,System.UInt16)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.Int16UpDown">
            <summary>
            Class defining an Int16 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int16UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.Int16UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int16UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.Int16UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int16UpDown.CustomIncrementValue(System.Int16,System.Int16)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.Int16UpDown.CustomDecrementValue(System.Int16,System.Int16)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.Int64UpDown">
            <summary>
            Class defining an Int64 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int64UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.Int64UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int64UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.Int64UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int64UpDown.CustomIncrementValue(System.Int64,System.Int64)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.Int64UpDown.CustomDecrementValue(System.Int64,System.Int64)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.AllowedSpecialValues">
            <summary>
            Enum defining the allowed numeric special values.
            </summary>
        </member>
        <member name="T:XControls.NumericUpDown.ByteUpDown">
            <summary>
            Class defining a byte editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ByteUpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.ByteUpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ByteUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.ByteUpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ByteUpDown.CustomIncrementValue(System.Byte,System.Byte)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ByteUpDown.CustomDecrementValue(System.Byte,System.Byte)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.ANativeNumericUpDown`1">
            <summary>
            Class defining a native numeric editor.
            </summary>
            <typeparam name="T">The type of the edited value.</typeparam>
        </member>
        <member name="T:XControls.NumericUpDown.ANativeNumericUpDown`1.FromText">
            <summary>
            Converts a value form the given text.
            </summary>
            <param name="pText">The text to parse.</param>
            <param name="pStyle">The number style.</param>
            <param name="pProvider">The format provider.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.ANativeNumericUpDown`1.FromDecimal">
            <summary>
            Converts a value form a decimal value.
            </summary>
            <param name="pDecimal">The decimal value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mFromText">
            <summary>
            Stores the value converter from text.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mFromDecimal">
            <summary>
            Stores the value converter from decimal.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mFromLowerThan">
            <summary>
            Stores the lower than comparator.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mFromGreaterThan">
            <summary>
            Stores the greater than comparator.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mLastDefinedValue">
            <summary>
            Stores the last defined value. Property used when the <see cref="P:XControls.NumericUpDown.ANativeNumericUpDown`1.IsNullableValue"/> property is set to true.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.IsNullableValueProperty">
            <summary>
            Identifies the IsNullableValue dependency property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.InfiniteValueProperty">
            <summary>
            Identifies the InfiniteValue dependency property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.ParsingNumberStyleProperty">
            <summary>
            Identifies the ParsingNumberStyle dependency property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.AutoReverseProperty">
            <summary>
            Identifies the AutoReverse dependency property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.AllowMinusZeroProperty">
            <summary>
            Identifies the AllowMinusZero dependency property.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.IsNullableValue">
            <summary>
            Gets the value indicating if the edited value can be set to null.
            </summary>
            <remarks>
            If true, the value can be set to null only at the initialization.
            Once the value is defined, it will never be able set it to null again.
            </remarks>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.InfiniteValue">
            <summary>
            Gets or sets the infinite value.
            </summary>
            <remarks>
            If the infinite value is null, the corresponding infinite button in the template is not displayed.
            </remarks>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.ParsingNumberStyle">
            <summary>
            Gets or sets the number style to use during value parsing.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.AutoReverse">
            <summary>
            Gets the value indicating if the value can be set to min when max is incremented.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.AllowMinusZero">
            <summary>
            Gets the falg indicating if the minus zero can be entered in the control.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.#ctor(XControls.NumericUpDown.ANativeNumericUpDown{`0}.FromText,XControls.NumericUpDown.ANativeNumericUpDown{`0}.FromDecimal,System.Func{`0,`0,System.Boolean},System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="!:ANativeNumericUpDown"/> class.
            </summary>
            <param name="pFromText">The value converter from text.</param>
            <param name="pFromDecimal">The value converter from decimal.</param>
            <param name="pFromLowerThan">The lower than comparator.</param>
            <param name="pFromGreaterThan">The greater than comparator.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.ParsePhysicalValue(System.String,System.IFormatProvider)">
            <summary>
            Parse the text defining a physical value.
            </summary>
            <param name="pText">The text to parse.</param>
            <param name="pCultureInfo">The culture info.</param>
            <returns>The parsed value as decimal.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.UpdateMetadata(System.Type,System.Nullable{`0},System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Updates the class metadata.
            </summary>
            <param name="pType">The type of the concrete editor.</param>
            <param name="pIncrement">The increment value.</param>
            <param name="pMinValue">The minimum value.</param>
            <param name="pMaxValue">The maximum value.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.UpdateMetadataCommon(System.Type,System.Nullable{`0},System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Updates the class metadata.
            </summary>
            <param name="pType">The type of the concrete editor.</param>
            <param name="pIncrement">The increment value.</param>
            <param name="pMinValue">The minimum value.</param>
            <param name="pMaxValue">The maximum value.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.TestInputSpecialValue(XControls.NumericUpDown.AllowedSpecialValues,XControls.NumericUpDown.AllowedSpecialValues)">
            <summary>
            Test if the special value is allowed in this editor.
            </summary>
            <param name="pAllowedValues">The allowed values.</param>
            <param name="pValueToCompare">The value to test.</param>
            <returns>True if the special value is allowed, false otherwise.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.OnMaximumChanged(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Method called when the maximum value is modified.
            </summary>
            <param name="pOldValue">The old maximum value.</param>
            <param name="pNewValue">The new maximum value.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.OnMinimumChanged(`0,`0)">
            <summary>
            Method called when the minimum value is modified.
            </summary>
            <param name="pOldValue">The old minimum value.</param>
            <param name="pNewValue">The new minimum value.</param>
        </member>
        <member name="F:XControls.NumericUpDown.ANativeNumericUpDown`1.mTempValue">
            <summary>
            Stores the value used to display the value when the control is in UpdateValueOnEnterKey mode.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANativeNumericUpDown`1.TempValue">
            <summary>
            Gets or sets the value used to display the value when the control is in <see cref="!:UpdateValueOnEnterKey"/> mode.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.ConvertTextToValue(System.String)">
            <summary>
            Converts the text to the corresponding value.
            </summary>
            <param name="pText">The text to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.ConvertRawValueToText(System.Nullable{`0})">
            <summary>
            Converts the raw value to text (not formatted).
            </summary>
            <param name="pValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.ConvertValueToText(System.Nullable{`0})">
            <summary>
            Converts the value to text.
            </summary>
            <param name="pValue">The p value.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANativeNumericUpDown`1.CoerceText(System.String)">
            <summary>
            Coerce the text entered by the user.
            </summary>
            <param name="pBaseText">The text to coerce.</param>
            <returns>The coerced text.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.DecimalUpDown">
            <summary>
            Class defining a decimal editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DecimalUpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.DecimalUpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DecimalUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.DecimalUpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DecimalUpDown.CustomIncrementValue(System.Decimal,System.Decimal)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DecimalUpDown.CustomDecrementValue(System.Decimal,System.Decimal)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.DoubleUpDown">
            <summary>
            Class defining a double editor.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.DoubleUpDown.AllowInputSpecialValuesProperty">
            <summary>
            Identifies the AllowInputSpecialValues property.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.DoubleUpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.DoubleUpDown"/> class.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.DoubleUpDown.AllowInputSpecialValues">
            <summary>
            Gets or sets the flags defining the allowed special values.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.OnCoerceValue(System.Nullable{System.Double})">
            <summary>
            Coerce the value.
            </summary>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.OnCoerceIncrement(System.Nullable{System.Double})">
            <summary>
            Coerce the value.
            </summary>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.OnCoerceMaximum(System.Nullable{System.Double})">
            <summary>
            Coerce the value.
            </summary>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.OnCoerceMinimum(System.Nullable{System.Double})">
            <summary>
            Coerce the value.
            </summary>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.CustomIncrementValue(System.Double,System.Double)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.CustomDecrementValue(System.Double,System.Double)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.SetValidSpinDirection(System.Nullable{System.Double})">
            <summary>
            Sets the valid spin direction depending on the value.s
            </summary>
            <param name="pValue">The value to evaluate.</param>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.ConvertTextToValue(System.String)">
            <summary>
            Converts the text to its corresponding value.
            </summary>
            <param name="pText">The text to convert.</param>
            <returns>The corresponding value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.DoubleUpDown.CoerceSpecialValue(System.Nullable{System.Double})">
            <summary>
            Coerce the value taking in account the special value constraints.
            </summary>
            <param name="pValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.Int32UpDown">
            <summary>
            Class defining an Int32 editor.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int32UpDown.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.NumericUpDown.Int32UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int32UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.NumericUpDown.Int32UpDown"/> class.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.Int32UpDown.CustomIncrementValue(System.Int32,System.Int32)">
            <summary>
            Increments the value.
            </summary>
            <param name="pValue">The value to increment.</param>
            <param name="pIncrement">The increment step.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.Int32UpDown.CustomDecrementValue(System.Int32,System.Int32)">
            <summary>
            Decrements the value.
            </summary>
            <param name="pValue">The value to decrement.</param>
            <param name="pIncrement">The decrement step.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.ANumericUpDown`1">
            <summary>
            Class defining a base numeric up down editor.
            </summary>
            <typeparam name="T">The type of the numeric to edit.</typeparam>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.AutoSelectBehaviorProperty">
            <summary>
            Identifies the AutoSelectBehavior property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.AutoMoveFocusProperty">
            <summary>
            Identifies the AutoMoveFocus property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.FormatStringProperty">
            <summary>
            Identifies the FormatString property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.NumberDecimalDigitsProperty">
            <summary>
            Identifies the NumberDecimalDigits property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.UnitSymbolProperty">
            <summary>
            Identifies the UnitSymbol property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.IncrementProperty">
            <summary>
            Identifies the Increment property.
            </summary>
        </member>
        <member name="F:XControls.NumericUpDown.ANumericUpDown`1.mBaseWatermark">
            <summary>
            Stores the string set by the user without the unit symbol.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.AutoSelectBehavior">
            <summary>
            Gets or sets the flag indicating when the automatic selection can be done.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.AutoMoveFocus">
            <summary>
            Gets or sets the flag indicating if the focus can be moved using the arrow keys.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.Increment">
            <summary>
            Gets or sets the step to use to increment the value.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.NumberDecimalDigits">
            <summary>
            Gets or sets the number of decimal digits.
            </summary>
        </member>
        <member name="P:XControls.NumericUpDown.ANumericUpDown`1.UnitSymbol">
            <summary>
            Gets or sets the unit symbol.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnFormatStringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the format string changed.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnNumberDecimalDigitsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the format string changed.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnUnitSymbolChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the unit symbol changed.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.BuildFormatString">
            <summary>
            Builds and returns the format string depending on the number of decimal, unit symbol... properties.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnFormatStringChanged(System.String,System.String)">
            <summary>
            Delegate called when the format string changed.
            </summary>
            <param name="pOldValue">The old value.</param>
            <param name="pNewValue">The new value.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.SyncTextAndValueProperties">
            <summary>
            Synchronizes the text and the value.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnIncrementChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the increment value changed.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnIncrementChanged(`0,`0)">
            <summary>
            Deleaget calles when the increment value changed.
            </summary>
            <param name="pOldValue">The old value.</param>
            <param name="pNewValue">The new value.</param>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnCoerceIncrement(System.Windows.DependencyObject,System.Object)">
            <summary>
            Delegate called when the increment value is coerced.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnCoerceIncrement(`0)">
            <summary>
            Delegate called when the increment value is coerced.
            </summary>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.ContainsUnitSymbol(System.String)">
            <summary>
            Verifies if the given text contains the percent symbol letter.
            </summary>
            <param name="pStringToTest">The string to test.</param>
            <returns>Flag to know if the symbol is in the string.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.OnCoerceWatermark(System.String)">
            <summary>
            Coerce the Watermark.
            </summary>
            <param name="pBaseValue">The Watermark to coerce.</param>
            <returns>The coerced Watermark.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.ForceWatermarkRefresh">
            <summary>
            Force the watermark refresh to display the unit.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.ANumericUpDown`1.CustomDisplayRawValueAsText">
            <summary>
            Displays the raw value as text in the text box.
            </summary>
        </member>
        <member name="M:XControls.NumericUpDown.SingleUpDown.ConvertTextToValue(System.String)">
            <summary>
            Converts the text to its corresponding value.
            </summary>
            <param name="pText">The text to convert.</param>
            <returns>The corresponding value.</returns>
        </member>
        <member name="M:XControls.NumericUpDown.SingleUpDown.CoerceSpecialValue(System.Nullable{System.Single})">
            <summary>
            Coerce the value taking in account the special value constraints.
            </summary>
            <param name="pValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:XControls.NumericUpDown.UShortUpDown">
            <summary>
            A up down for short value.
            </summary>
            <seealso cref="!:XControls.ANativeNumericUpDown&lt;System.UInt16&gt;" />
        </member>
        <member name="M:XControls.NumericUpDown.UShortUpDown.CustomIncrementValue(System.UInt16,System.UInt16)">
            <summary>
            Customs the increment value.
            </summary>
            <param name="value">The value.</param>
            <param name="increment">The increment.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.NumericUpDown.UShortUpDown.CustomDecrementValue(System.UInt16,System.UInt16)">
            <summary>
            Customs the decrement value.
            </summary>
            <param name="value">The value.</param>
            <param name="increment">The increment.</param>
            <returns></returns>
        </member>
        <member name="T:XControls.PerformanceGauge.PerformanceGauge">
            <summary>
            Defines a linear gradient performance gauge.
            </summary>
            <summary>
            PerformanceGauge
            </summary>
        </member>
        <member name="F:XControls.PerformanceGauge.PerformanceGauge.ValueProperty">
            <summary>
            Value dependency property
            </summary>
        </member>
        <member name="F:XControls.PerformanceGauge.PerformanceGauge.MinimumProperty">
            <summary>
            Minimum dependency property
            </summary>
        </member>
        <member name="F:XControls.PerformanceGauge.PerformanceGauge.MaximumProperty">
            <summary>
            Maximum dependecy property
            </summary>
        </member>
        <member name="M:XControls.PerformanceGauge.PerformanceGauge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XControls.PerformanceGauge.PerformanceGauge"/> class.
            </summary>
        </member>
        <member name="P:XControls.PerformanceGauge.PerformanceGauge.Value">
            <summary>
            Gets or sets the value of the performance gauge.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:XControls.PerformanceGauge.PerformanceGauge.Minimum">
            <summary>
            Gets or sets the minimum for the progress.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:XControls.PerformanceGauge.PerformanceGauge.Maximum">
            <summary>
            Gets or sets the maximum value for the progress.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:XControls.PerformanceGauge.PerformanceGauge.EndPoint">
            <summary>
            Gets the end point for linear gradient. Bot defined in xaml because
            Point.X and Point.Y can't be bound
            </summary>
            <value>The end point.</value>
        </member>
        <member name="M:XControls.PerformanceGauge.PerformanceGauge.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XControls.ProgressBar.ProgressBar">
            <summary>
                This class describes a progress bar able to display the progression as text.
            </summary>
            <!-- DPE -->
            <summary>
            ProgressBar
            </summary>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.#ctor">
            <summary>
                Initializes a new instance of the ProgressBar class.
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.ProgressTextIsVisibleProperty">
            <summary>
                This field defines a dependency on the property "ProgressTextIsVisible".
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.LabelIsVisibleProperty">
            <summary>
                This field defines a dependency on the property "LabelIsVisible".
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.LabelProperty">
            <summary>
                This field defines a dependency on the property "Label".
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.MinimumProperty">
            <summary>
                This field defines a dependency on the property "Minimum".
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.MaximumProperty">
            <summary>
                This field defines a dependency on the property "Maximum".
            </summary>
        </member>
        <member name="F:XControls.ProgressBar.ProgressBar.ValueProperty">
            <summary>
                This field defines a dependency on the property "Value".
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.Label">
            <summary>
                Gets or sets the label.
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.Minimum">
            <summary>
                Gets or sets the Minimum.
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.Maximum">
            <summary>
                Gets or sets the Maximum.
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.Value">
            <summary>
                Gets or sets the value.
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.ProgressTextIsVisible">
            <summary>
                Gets or sets the flag indicating if the progress text is visible.
            </summary>
        </member>
        <member name="P:XControls.ProgressBar.ProgressBar.LabelIsVisible">
            <summary>
                Gets or sets the flag indicating if the label is visible.
            </summary>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the min value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnMinValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the min value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnMaxValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the max value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnCurrentValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the min value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnProgressTextIsVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the text visibility is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.OnLabelIsVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the label vsibility is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.UpdateProgressText">
            <summary>
                Updates the text displayed on the progress bar.
            </summary>
        </member>
        <member name="M:XControls.ProgressBar.ProgressBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XControls.TextBox.ConstrainedTextBox">
            <summary>
                Defines a textbox which can edit a value constrained to a unique type.
            </summary>
            <!-- DPE -->
            <summary>
            ConstrainedTextBox
            </summary>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.#ctor">
            <summary>
                Initializes a new instance of the <see cref="!:DS_Class1" /> class.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.mPreviousValue">
            <summary>
                Hold the previous value when the textbox get focused.
                Manly useful when paste is performed with bad value.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.mUseMin">
            <summary>
                Tells whether the min value should be used as lower bound.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.mUseMax">
            <summary>
                Tells whether the max value should be used as lower bound.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.ValueTypeProperty">
            <summary>
                The dependency property which owned the ValueType property.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.MaxValueProperty">
            <summary>
                Identifies the MaxValue dependency property.
            </summary>
        </member>
        <member name="F:XControls.TextBox.ConstrainedTextBox.MinValueProperty">
            <summary>
                Identifies the MinValue dependency property.
            </summary>
        </member>
        <member name="P:XControls.TextBox.ConstrainedTextBox.ValueType">
            <summary>
                Gets or sets the type of the value the editor is editing.
            </summary>
        </member>
        <member name="P:XControls.TextBox.ConstrainedTextBox.MinValue">
            <summary>
                Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:XControls.TextBox.ConstrainedTextBox.MaxValue">
            <summary>
                Gets or sets the maxmimum value.
            </summary>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnPreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
                Method called when an input is about to be entered.
            </summary>
            <param name="pSender">The object sender.</param>
            <param name="pArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnMinValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delagate is called when the min value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnMaxValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delagate is called when the max value is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Method called when the textbox got the focus.
            </summary>
            <param name="pSender">The object sender.</param>
            <param name="pArgs">The event arguments.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XControls.TextBox.ConstrainedTextBox.IsTextSuitable(System.String)" -->
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Method called when the textbox lost the focus.
            </summary>
            <param name="pSender">The object sender.</param>
            <param name="pArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.OnKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
                Method called when a key is unpressed on the textbox.
            </summary>
            <param name="pSender">The object sender.</param>
            <param name="pArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.ConstrainedTextBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XControls.TextBox.EditableInPlaceTextBox">
            <summary>
                This class defines a textbox which can be editable.
            </summary>
            <summary>
            EditableInPlaceTextBox
            </summary>
        </member>
        <member name="F:XControls.TextBox.EditableInPlaceTextBox.mOldText">
            <summary>
                We keep the old text when we go into editmode in case the user aborts with the escape key
            </summary>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.#ctor">
            <summary>
                This class define a text box that is editable
            </summary>
        </member>
        <member name="F:XControls.TextBox.EditableInPlaceTextBox.TextProperty">
            <summary>
                Property associated to Text property
            </summary>
        </member>
        <member name="F:XControls.TextBox.EditableInPlaceTextBox.IsEditableProperty">
            <summary>
                Property associated to IsEditable property
            </summary>
        </member>
        <member name="F:XControls.TextBox.EditableInPlaceTextBox.IsInEditModeProperty">
            <summary>
                Property associated to IsInEditMode property
            </summary>
        </member>
        <member name="F:XControls.TextBox.EditableInPlaceTextBox.TextFormatProperty">
            <summary>
                Property associated to the TextFormat property
            </summary>
        </member>
        <member name="P:XControls.TextBox.EditableInPlaceTextBox.Text">
            <summary>
                The editable text displayed to the user
            </summary>
        </member>
        <member name="P:XControls.TextBox.EditableInPlaceTextBox.IsEditable">
            <summary>
                Tells if the item is editable
            </summary>
        </member>
        <member name="P:XControls.TextBox.EditableInPlaceTextBox.IsInEditMode">
            <summary>
                Tell if the item is in edit mode
            </summary>
        </member>
        <member name="P:XControls.TextBox.EditableInPlaceTextBox.TextFormat">
            <summary>
                Used if the editable text should be surrounded by more text.
                The TextFormat property uses the String.Format function to format the text,
                which means that the editable text is referenced by {0} inside a string.
                If the TextFormat property is set to either the empty string (""), the string containing only {0} ("{0}"),
                or is not set at all, the control simply shows the string from the Text property.
            </summary>
        </member>
        <member name="P:XControls.TextBox.EditableInPlaceTextBox.FormattedText">
            <summary>
                Format the Text according to TextFormat
            </summary>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnEditModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the edition mode is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                This delegate is called when the edition mode is changed.
            </summary>
            <param name="pSender">The event sender.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.CoerceEditMode(System.Windows.DependencyObject,System.Object)">
            <summary>
                This delegate is called to coerce the edition mode.
            </summary>
            <param name="pObject">The dependency object.</param>
            <param name="pMode">The edition mode to coerce.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnTextBoxLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Invoked when we enter edit mode.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">RoutedEventArgs</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
                Invoked when we exit edit mode.
            </summary>
            <param name="sender">sender</param>
            <param name="e">RoutedEventArgs</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnTextBoxKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
                Invoked when the user edits the annotation.
            </summary>
            <param name="sender">sender</param>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.OnMouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Invoked when the user clicks twice.
            </summary>
            <param name="sender">sender</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.ForceFormatedTextUpdate">
            <summary>
                Force the update of the formated string into the view when the
                control is not in edit mode.
            </summary>
            <remarks>
                This method is mainly used to refresh the text displayed in the control
                when it is not in the edit mode.
                In this state, the FormatedText property is used to display the text.
                The NotifyPropertyChanged could be used to force the refresh, but it doesn't
                work because the data context is not "this" object.
                The only way to force the refresh is then to force the edit mode and then
                go back to the non edit mode. This way, the FormatedText property is called
                when the corresponding DataTemplate is loaded, and the GUI is refreshed.
            </remarks>
        </member>
        <member name="M:XControls.TextBox.EditableInPlaceTextBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XControls.Primitives.InputBase">
            <summary>
            Class defining an input base class.
            </summary>
        </member>
        <member name="F:XControls.Primitives.InputBase.IsPresenterProperty">
            <summary>
            Identifies the IsPresenter property.
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.IsPresenter">
            <summary>
            Gets or sets the flag indicating if the input just has to display the value.
            </summary>
        </member>
        <member name="F:XControls.Primitives.InputBase.AllowTextInputProperty">
            <summary>
            The allow text input property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.AllowTextInput">
            <summary>
            Gets or sets a value indicating whether [allow text input].
            </summary>
            <value>
              <c>true</c> if [allow text input]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnAllowTextInputChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [allow text input changed].
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnAllowTextInputChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when [allow text input changed].
            </summary>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.CultureInfoProperty">
            <summary>
            The culture information property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.CultureInfo">
            <summary>
            Gets or sets the culture information.
            </summary>
            <value>
            The culture information.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnCultureInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [culture information changed].
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnCultureInfoChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when [culture information changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.IsReadOnlyProperty">
            <summary>
            The is read only property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when [read only changed].
            </summary>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.IsUndoEnabledProperty">
            <summary>
            The is undo enabled property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.IsUndoEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is undo enabled.
            </summary>
            <value>
              <c>true</c> if this instance is undo enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnIsUndoEnabledChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when [is undo enabled changed].
            </summary>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.TextProperty">
            <summary>
            The text property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnCoerceText(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the text input.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pBaseValue">The value to cerce.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Delegate called when the text changed.
            </summary>
            <param name="pObject">The modified object.</param>
            <param name="pEventArgs">The event arguments.</param>
        </member>
        <member name="M:XControls.Primitives.InputBase.CoerceText(System.String)">
            <summary>
            Coerce the text entered by the user.
            </summary>
            <param name="pBaseText">The text to coerce.</param>
            <returns>The coerced text.</returns>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnTextChanged(System.String,System.String)">
            <summary>
            Called when [text changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.TextChangedEvent">
            <summary>
            The text changed event
            </summary>
        </member>
        <member name="E:XControls.Primitives.InputBase.TextChanged">
            <summary>
            Occurs when [text changed].
            </summary>
        </member>
        <member name="M:XControls.Primitives.InputBase.RaiseTextChangedEvent(System.String,System.String)">
            <summary>
            Raises the text changed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:XControls.Primitives.InputBase.TextAlignmentProperty">
            <summary>
            The text alignment property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="F:XControls.Primitives.InputBase.WatermarkProperty">
            <summary>
            The watermark property
            </summary>
        </member>
        <member name="P:XControls.Primitives.InputBase.Watermark">
            <summary>
            Gets or sets the watermark.
            </summary>
            <value>
            The watermark.
            </value>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnCoerceWatermark(System.Windows.DependencyObject,System.Object)">
            <summary>
            Delegate called when the watermark is coerced.
            </summary>
            <param name="pObject">The modified control.</param>
            <param name="pBaseValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.Primitives.InputBase.OnCoerceWatermark(System.String)">
            <summary>
            Coerce the Watermark.
            </summary>
            <param name="pBaseValue">The Watermark to coerce.</param>
            <returns>The coerced Watermark.</returns>
        </member>
        <member name="P:XControls.Primitives.InputBase.WatermarkTemplate">
            <summary>
            Gets or sets the watermark template.
            </summary>
            <value>
            The watermark template.
            </value>
        </member>
        <member name="T:XControls.Primitives.MouseWheelActiveTrigger">
            <summary>
            Specify when the mouse wheel is active.
            </summary>
        </member>
        <member name="F:XControls.Primitives.MouseWheelActiveTrigger.Focused">
            <summary>
            The focused
            </summary>
        </member>
        <member name="F:XControls.Primitives.MouseWheelActiveTrigger.FocusedMouseOver">
            <summary>
            The focused mouse over
            </summary>
        </member>
        <member name="F:XControls.Primitives.MouseWheelActiveTrigger.MouseOver">
            <summary>
            The mouse over
            </summary>
        </member>
        <member name="F:XControls.Primitives.MouseWheelActiveTrigger.Disabled">
            <summary>
            The disabled
            </summary>
        </member>
        <member name="T:XControls.Primitives.UpDownBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:XControls.Primitives.InputBase" />
            <seealso cref="T:XControls.Core.Input.IValidateInput" />
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.FocusNavigationDirectionProperty">
            <summary>
            Identifies the FocusNavigationDirection dependency property.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.HandlesSpecialKeysProperty">
            <summary>
            Identifies the HandlesSpecialKeys dependency property.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.PartTextBox">
            <summary>
            Name constant for control template part.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.PartSpinner">
            <summary>
            The part spinner
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.IsTextChangedFromUi">
            <summary>
            The is text changed from UI
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.mIsSyncingTextAndValueProperties">
            <summary>
            Flags if the Text and Value properties are in the process of being sync'd
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.mInternalValueSet">
            <summary>
            The internal value set
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.Spinner">
            <summary>
            Gets the spinner.
            </summary>
            <value>
            The spinner.
            </value>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.TextBox">
            <summary>
            Gets the text box.
            </summary>
            <value>
            The text box.
            </value>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.FocusNavigationDirection">
            <summary>
            Gets or sets the strategy to redirect the focus.
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.HandlesSpecialKeys">
            <summary>
            Gets or sets the flag indicating if the enter, tab and cancel keys must be handled by the control.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.AllowSpinProperty">
            <summary>
            The allow spin property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.AllowSpin">
            <summary>
            Gets or sets a value indicating whether [allow spin].
            </summary>
            <value>
              <c>true</c> if [allow spin]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.ButtonSpinnerLocationProperty">
            <summary>
            The button spinner location property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.ButtonSpinnerLocation">
            <summary>
            Gets or sets the button spinner location.
            </summary>
            <value>
            The button spinner location.
            </value>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.DisplayDefaultValueOnEmptyTextProperty">
            <summary>
            The display default value on empty text property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.DisplayDefaultValueOnEmptyText">
            <summary>
            Gets or sets a value indicating whether [display default value on empty text].
            </summary>
            <value>
              <c>true</c> if [display default value on empty text]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnDisplayDefaultValueOnEmptyTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [display default value on empty text changed].
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnDisplayDefaultValueOnEmptyTextChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when [display default value on empty text changed].
            </summary>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.DefaultValueProperty">
            <summary>
            The default value property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnDefaultValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [default value changed].
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnDefaultValueChanged(`0,`0)">
            <summary>
            Called when [default value changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.MaximumProperty">
            <summary>
            The maximum property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnMaximumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [maximum changed].
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnMaximumChanged(`0,`0)">
            <summary>
            Called when [maximum changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceMaximum(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce maximum].
            </summary>
            <param name="d">The d.</param>
            <param name="baseValue">The base value.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceMaximum(`0)">
            <summary>
            Called when [coerce maximum].
            </summary>
            <param name="baseValue">The base value.</param>
            <returns></returns>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.MinimumProperty">
            <summary>
            The minimum property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnMinimumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [minimum changed].
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnMinimumChanged(`0,`0)">
            <summary>
            Called when [minimum changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceMinimum(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce minimum].
            </summary>
            <param name="d">The d.</param>
            <param name="baseValue">The base value.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceMinimum(`0)">
            <summary>
            Called when [coerce minimum].
            </summary>
            <param name="baseValue">The base value.</param>
            <returns></returns>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.MouseWheelActiveTriggerProperty">
            <summary>
            Identifies the MouseWheelActiveTrigger dependency property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.MouseWheelActiveTrigger">
            <summary>
            Get or set when the mouse wheel event should affect the value.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.MouseWheelActiveOnFocusProperty">
            <summary>
            The mouse wheel active on focus property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.MouseWheelActiveOnFocus">
            <summary>
            Gets or sets a value indicating whether [mouse wheel active on focus].
            </summary>
            <value>
              <c>true</c> if [mouse wheel active on focus]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnMouseWheelActiveOnFocusChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [mouse wheel active on focus changed].
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.ShowButtonSpinnerProperty">
            <summary>
            The show button spinner property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.ShowButtonSpinner">
            <summary>
            Gets or sets a value indicating whether [show button spinner].
            </summary>
            <value>
              <c>true</c> if [show button spinner]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.UpdateValueOnEnterKeyProperty">
            <summary>
            The update value on enter key property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.UpdateValueOnEnterKey">
            <summary>
            Gets or sets a value indicating whether [update value on enter key].
            </summary>
            <value>
              <c>true</c> if [update value on enter key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.ValueProperty">
            <summary>
            The value property
            </summary>
        </member>
        <member name="P:XControls.Primitives.UpDownBase`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Delegate called to coearce the value.
            </summary>
            <param name="pObject">The used control.</param>
            <param name="pBasevalue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCoerceValue(`0)">
            <summary>
            Delegate called to coearce the value.
            </summary>
            <param name="pNewValue">The value to coerce.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnValueChanged(`0,`0)">
            <summary>
            Called when [value changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
            <summary>
            Fournit la gestion de classe pour les cas où une touche d'accès rapide explicite pour cet élément est appelée.
            </summary>
            <param name="e">Données de l'événement de touche d'accès rapide.Les données d'événement signalent la touche qui a été appelée et indiquent si l'objet <see cref="T:System.Windows.Input.AccessKeyManager" /> qui contrôle que l'envoi de ces événements a également envoyé cet appel de touche d'accès rapide à d'autres éléments.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnApplyTemplate">
            <summary>
            En cas de substitution dans une classe dérivée, appelé chaque fois que le code de l'application ou que des processus internes appellent <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.TextBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the GotFocus event of the TextBox control.
            </summary>
            <param name="pSender">The source of the event.</param>
            <param name="pRoutedEventArgs">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.CustomDisplayRawValueAsText">
            <summary>
            Displays the raw value as text in the text box.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.DisplayRawValueAsText">
            <summary>
            Displays the raw value as text in the text box.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:PreviewKeyDown" /> event.
            </summary>
            <param name="pEventArgs">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.CanMoveFocus(System.Windows.Input.FocusNavigationDirection)">
            <summary>
            Determines whether this instance [can move focus] the specified p direction.
            </summary>
            <param name="pDirection">The p direction.</param>
            <returns>
              <c>true</c> if this instance [can move focus] the specified p direction; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.MoveFocus">
            <summary>
            Moves the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnTextChanged(System.String,System.String)">
            <summary>
            Called when [text changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnCultureInfoChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when [culture information changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when [read only changed].
            </summary>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.HandleClickOutsideOfControlWithMouseCapture(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click outside of control with mouse capture.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnSpinnerSpin(System.Object,XControls.ButtonSpinner.SpinEventArgs)">
            <summary>
            Called when [spinner spin].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:XControls.Primitives.UpDownBase`1.InputValidationError">
            <summary>
            Event raised when an error occured on validation.
            </summary>
        </member>
        <member name="F:XControls.Primitives.UpDownBase`1.ValueChangedEvent">
            <summary>
            The value changed event
            </summary>
        </member>
        <member name="E:XControls.Primitives.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnSpin(XControls.ButtonSpinner.SpinEventArgs)">
            <summary>
            Raises the <see cref="E:Spin" /> event.
            </summary>
            <param name="e">The <see cref="T:XControls.ButtonSpinner.SpinEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.RaiseValueChangedEvent(`0,`0)">
            <summary>
            Raises the value changed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnInitialized(System.EventArgs)">
            <summary>
            Déclenche l'événement <see cref="E:System.Windows.FrameworkElement.Initialized" />.Cette méthode est appelée chaque fois qu'<see cref="P:System.Windows.FrameworkElement.IsInitialized" /> a la valeur true  en interne.
            </summary>
            <param name="e"><see cref="T:System.Windows.RoutedEventArgs" /> qui contient les données d'événement.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.DoDecrement">
            <summary>
            Performs an increment if conditions allow it.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.DoIncrement">
            <summary>
            Performs a decrement if conditions allow it.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.TextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event of the TextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.TryUpdateTextProperty">
            <summary>
            Tries the update text property.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.TextBox_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the LostFocus event of the TextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Appelé juste avant que l'événement <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> soit déclenché par cet élément.Implémentez cette méthode pour permettre la gestion de classes pour cet événement.
            </summary>
            <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.RaiseInputValidationError(System.Exception)">
            <summary>
            Raises the input validation error.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.CommitInput">
            <summary>
            Commits the modification and validate the input.
            </summary>
            <returns>
            True if the commit validation succeed, false otherwise.
            </returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.CancelInput">
            <summary>
            Cancels the modification.
            </summary>
            <returns>
            True if the cancelation succeed, false otherwise.
            </returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.SyncTextAndValueProperties(System.Boolean,System.String)">
            <summary>
            Synchronizes the text and value properties.
            </summary>
            <param name="updateValueFromText">if set to <c>true</c> [update value from text].</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.SyncTextAndValueProperties(System.Boolean,System.String,System.Boolean)">
            <summary>
            Synchronizes the text and value properties.
            </summary>
            <param name="updateValueFromText">if set to <c>true</c> [update value from text].</param>
            <param name="text">The text.</param>
            <param name="forceTextUpdate">if set to <c>true</c> [force text update].</param>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.ConvertValueToText">
            <summary>
            Converts the value to text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.ConvertTextToValue(System.String)">
            <summary>
            Converts the formatted text to a value.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.ConvertValueToText(`0)">
            <summary>
            Converts the value to formatted text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.ConvertRawValueToText(`0)">
            <summary>
            Converts the raw value to text (not formatted).
            </summary>
            <param name="pValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Descrease.
            </summary>
        </member>
        <member name="M:XControls.Primitives.UpDownBase`1.SetValidSpinDirection(`0)">
            <summary>
            Sets the valid spin directions.
            </summary>
        </member>
        <member name="T:XControls.WatermarkTextBox.WatermarkTextBox">
            <summary>
            Class defining a watermarked text box.
            </summary>
        </member>
        <member name="F:XControls.WatermarkTextBox.WatermarkTextBox.WatermarkProperty">
            <summary>
            Identifies the Watermark property.
            </summary>
        </member>
        <member name="F:XControls.WatermarkTextBox.WatermarkTextBox.WatermarkTemplateProperty">
            <summary>
            Identifies the WatermarkTemplate property.
            </summary>
        </member>
        <member name="P:XControls.WatermarkTextBox.WatermarkTextBox.Watermark">
            <summary>
            Gets or sets the watermask.
            </summary>
        </member>
        <member name="P:XControls.WatermarkTextBox.WatermarkTextBox.WatermarkTemplate">
            <summary>
            Gets or sets the watermask data template.
            </summary>
        </member>
        <member name="M:XControls.WatermarkTextBox.WatermarkTextBox.#cctor">
            <summary>
            Initializes the <see cref="T:XControls.WatermarkTextBox.WatermarkTextBox"/> class.
            </summary>
        </member>
    </members>
</doc>
